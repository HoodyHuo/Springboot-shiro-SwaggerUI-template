logging:
  config: 'classpath:logback-spring.xml'
spring:
  profiles:
    active: dev #做profile 配置
  #    active: prod #做profile 配置
  mvc:
    throw-exception-if-no-handler-found: false #设置为true时, 直接抛出异常(便于异常统一处理，否则捕获不到404)
  resources:
    add-mappings: true #是否为我们工程中的资源文件建立映射 默认true （作为Restful使用时设置为false）
  #----------------------database-------------------------
  datasource:
    url: 'jdbc:mysql://localhost:3306/db-name?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8&useSSL=true'
    username: 'root'
    password: 'AbcAbc'
    driverClassName: 'com.mysql.cj.jdbc.Driver'
  #----------------------JPA--------org.springframework.boot.autoconfigure.data.redis.RedisProperties----------------------
  redis:
    host: localhost
    port: 6379
    password:
  jpa:
    database: MYSQL
    show-sql: false # Show or not log for each sql query
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    # Hibernate ddl auto (create, create-drop, update.none)
    #create： 每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
    #create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
    #update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
    #validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  #-----------------------------servlet-------------------------------
  servlet:
    multipart:
      max-file-size: 5MB #MB 意味上传着总文件大小不能超过5M
      max-request-size: 10MB #MB 表示a的总请求大小multipart/form-data不能超过10M
#-----------------------------shiro-------------------------------
shiro:
  web:
    enabled: true #启用或停用shiro 权限过滤
platform:
  shiro:
    realm:
      is-single: true  #是否启用单用户只能在一处登录
  baseUrl: 'localhost'
  logsPath: "./logs"
  uploadDir: "./storage"
